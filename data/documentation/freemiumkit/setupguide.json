{"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"roleHeading":"FreemiumKit","role":"article","images":[{"type":"icon","identifier":"FreemiumKit.png"}],"title":"SDK Setup Guide"},"hierarchy":{"paths":[["doc:\/\/FreemiumKit\/documentation\/Index"]]},"primaryContentSections":[{"content":[{"text":"Adding the SDK","anchor":"Adding-the-SDK","type":"heading","level":2},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open your app project in Xcode."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the “File” menu select “Add Package Dependencies…”"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"Setup-Add-Dependency"}]},{"type":"orderedList","start":3,"items":[{"content":[{"inlineContent":[{"type":"text","text":"Paste this to the top right text field and press “Add Package”:"}],"type":"paragraph"},{"code":["https:\/\/github.com\/FlineDev\/FreemiumKit.git"],"type":"codeListing","syntax":null}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"Setup-Add-Package"}]},{"type":"orderedList","start":4,"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select your app target (if not already selected) and confirm by pressing “Add Package”"}]}]}]},{"type":"paragraph","inlineContent":[{"identifier":"Setup-Choose-Package","type":"image"}]},{"text":"Configuring the SDK","anchor":"Configuring-the-SDK","type":"heading","level":2},{"content":[{"inlineContent":[{"text":"Don’t forget to ","type":"text"},{"code":"import FreemiumKit","type":"codeVoice"},{"text":" for any of the below calls to build.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Tip","style":"tip"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Make sure your app’s Asset Catalog contains the ","type":"text"},{"code":"FreemiumKit","type":"codeVoice"},{"text":" data set from the “Setup” tab of your app in FreemiumKit for Mac. If it doesn’t, drag & drop it from the Setup tab now.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a call to "},{"code":".environmentObject(FreemiumKit.shared)","type":"codeVoice"},{"type":"text","text":" to the root view of every scene in the app entry point. For example:"}]},{"type":"codeListing","code":["import FreemiumKit","","@main","struct MyApp: App {","   var body: some Scene {","      WindowGroup {","         MainView()","            .environmentObject(FreemiumKit.shared)","      }","   }","}"],"syntax":"swift"}]}]},{"content":[{"inlineContent":[{"text":"If you want to disable the paywall during DEBUG builds after you’ve made sure that it works as expected, you can call ","type":"text"},{"code":".overrideForDebug","type":"codeVoice"},{"text":" on ","type":"text"},{"code":"FreemiumKit.shared","type":"codeVoice"},{"text":" within an ","type":"text"},{"code":"#if DEBUG","type":"codeVoice"},{"text":" check like this:","type":"text"}],"type":"paragraph"},{"code":["WindowGroup {","   MainView()","      .onAppear {","         #if DEBUG","         FreemiumKit.shared.overrideForDebug(purchasedTier: 1)","         #endif","      }","      .environmentObject(FreemiumKit.shared)","}"],"syntax":"swift","type":"codeListing"}],"type":"aside","name":"Tip","style":"tip"},{"text":"Understanding Apples Tier System","anchor":"Understanding-Apples-Tier-System","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your goal is to ship your app with any combination of Monthly, Yearly, and Lifetime purchases, you most likely only need one tier: Tier 1. Just pass "},{"code":"1","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"purchasedTier","type":"codeVoice"},{"type":"text","text":" parameter everywhere – easy. Continue to the next section."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But if you want to support multiple levels of access to your app, like a combination of Monthly\/Yearly\/Lifetime for the ‘Pro’ level, another combination of Monthly\/Yearly\/Lifetime for the ‘Max’ level, and maybe another combination of Monthly\/Yearly\/Lifetime for the ‘Ultra’ level, that’s when you need to think about which value to pass to the "},{"code":"purchasedTier","type":"codeVoice"},{"type":"text","text":" parameter. Note that "},{"code":"1","type":"codeVoice"},{"type":"text","text":" always refers to the highest level. That’s how Apple has decided their tier system to work. Read their "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/help\/app-store-connect\/manage-subscriptions\/offer-auto-renewable-subscriptions","type":"reference"},{"type":"text","text":" to learn more."}]},{"text":"Showing the Paywalls","anchor":"Showing-the-Paywalls","type":"heading","level":2},{"identifier":"PaidViews","type":"video"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Lock your paid features for users who have not made a purchase yet by using one of the built-in views "},{"code":"PaidFeatureButton","type":"codeVoice"},{"type":"text","text":" or "},{"code":"PaidFeatureView","type":"codeVoice"},{"type":"text","text":". This is the recommended way of using the SDK (when applicable) as it handles purchase states automatically for you and saves you a lot of boilerplate code. For example:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ opens paywall if user has not purchased, else just like `Button`","PaidFeatureButton(\"Export\", systemImage: \"square.and.arrow.up\") {","   \/\/ your export logic – no check for a paid tier needed, only called if already purchased ","}","","\/\/ exactly the same as above, but gives you full customizability","PaidFeatureView {","   Button(\"Export\", systemImage: \"square.and.arrow.up\") {","      \/\/ your export logic – no check for a paid tier needed, only called if already purchased","   }","} lockedView: {","   Label(\"Export\", systemImage: \"lock\")","}"],"type":"codeListing"},{"inlineContent":[{"text":"Both ","type":"text"},{"code":"PaidFeatureButton","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"PaidFeatureView","type":"codeVoice"},{"text":" accept an ","type":"text"},{"code":"unlocksAtTier","type":"codeVoice"},{"text":" parameter of type ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" (default: ","type":"text"},{"code":"1","type":"codeVoice"},{"text":") and a ","type":"text"},{"code":"showPaywallOnPressIfLocked","type":"codeVoice"},{"text":" parameter of type ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":" (default: ","type":"text"},{"code":"true","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you don’t pass any of those parameters, the default behavior unlocks the feature only if tier 1 is purchased and shows a paywall on press if tier 1 is not yet purchased. If ","type":"text"},{"code":"showPaywallOnPressIfLocked","type":"codeVoice"},{"text":" is set to ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", the locked view will not have any automatic interaction, just rendering locked view state as-is without any added behavior.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"If you place ","type":"text"},{"code":"PaidFeatureButton","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"PaidFeatureView","type":"codeVoice"},{"text":" inside a view that self-dismisses itself after any interaction (like in a ","type":"text"},{"code":"Menu","type":"codeVoice"},{"text":"), the paywall might not show because SwiftUI deinitializes the view and attached logic before it can be executed. Use the below method in such contexts and place the ","type":"text"},{"code":".paywall","type":"codeVoice"},{"text":" modifier at the root of your view to avoid auto-deinit.","type":"text"}]}],"style":"note","type":"aside","name":"Note"}]},{"content":[{"inlineContent":[{"type":"text","text":"Alternatively, if you want to control the presentation of the paywall manually, you can add the "},{"type":"codeVoice","code":".paywall(isPresented:)"},{"type":"text","text":" modifier to your custom views where needed. For example:"}],"type":"paragraph"},{"syntax":"swift","code":["import FreemiumKit","","struct MyView: View {","   @State var showPaywall: Bool = false","","   var body: some View {","      Button(\"Unlock Pro\") {","         showPaywall = true","      }","      .paywall(isPresented: $showPaywall)","   }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you want to conditionally hide views based on paid state (like hiding the unlock button if a user has already purchased), you can add the "},{"type":"codeVoice","code":"FreemiumKit"},{"type":"text","text":" object as an "},{"type":"codeVoice","code":"@EnvironmentObject"},{"type":"text","text":" and call "},{"type":"codeVoice","code":".purchasedTier"},{"type":"text","text":" or "},{"type":"codeVoice","code":".hasPurchased"},{"type":"text","text":" if you only have one tier like so:"}],"type":"paragraph"},{"syntax":"swift","code":["import FreemiumKit","","struct MyView: View {","   @EnvironmentObject var freemiumKit: FreemiumKit","   @State var showPaywall: Bool = false","","   var body: some View {","      if freemiumKit.purchasedTier == nil {","         Button(\"Unlock Pro\") {","            showPaywall = true","         }","         .paywall(isPresented: $showPaywall)","      }","   }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you want to show the paywall upon appearance of a view if a user has not paid, you should first check that the "},{"type":"codeVoice","code":"purchasesLoaded"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"FreemiumKit"},{"type":"text","text":" is "},{"type":"codeVoice","code":"true"},{"type":"text","text":" – or else paying users might see the paywall, too. Since this is a common use case, our SDK ships with the "},{"type":"codeVoice","code":".onPurchasesLoaded"},{"type":"text","text":" view modifier which is guaranteed to be called exactly once (like "},{"type":"codeVoice","code":".onAppear"},{"type":"text","text":") but only when purchases are loaded:"}],"type":"paragraph"},{"syntax":"swift","code":["import FreemiumKit","","struct MyView: View {","   @State var showPaywall: Bool = false","","   var body: some View {","      VStack {","         \/\/ your view ...","      }","      .paywall(isPresented: $showPaywall)","      .onPurchasesLoaded {","         if !FreemiumKit.shared.hasPurchased {","            showPaywall = true","         }","      }","   }","}"],"type":"codeListing"}]},{"content":[{"inlineContent":[{"text":"There’s also a ","type":"text"},{"type":"codeVoice","code":"PaidStatusView"},{"text":" which you can add to your app’s settings to indicate to users what their current purchase state is. There are two styles:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["PaidStatusView(style: .plain)","PaidStatusView(style: .decorative(icon: .laurel))"],"syntax":"swift"}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"Setup-PaidStatusView"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":".decorative","type":"codeVoice"},{"type":"text","text":" style has multiple "},{"code":"icon","type":"codeVoice"},{"type":"text","text":" parameter options and also accepts optional "},{"code":"foregroundColor","type":"codeVoice"},{"type":"text","text":" and "},{"code":"backgroundColor","type":"codeVoice"},{"type":"text","text":" parameters if you need to adjust the defaults. Note that the "},{"code":"PaidStatusView","type":"codeVoice"},{"type":"text","text":" will automatically open a paywall on press if there’s no purchase yet. Else, it’s rendered as just a label without interaction."}]},{"type":"paragraph","inlineContent":[{"text":"If you place it inside a ","type":"text"},{"type":"codeVoice","code":"Form"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"Sections"},{"text":", you might want to set the ","type":"text"},{"type":"codeVoice","code":"listRowBackground"},{"text":" for a clean look like this:","type":"text"}]},{"type":"codeListing","code":["Form {","   Section {","      PaidStatusView(style: .decorative(icon: .laurel))","         .listRowBackground(Color.accentColor)","   }","   ","   \/\/ ...","}"],"syntax":"swift"},{"text":"`@EnvironmentObject` vs `FreemiumKit.shared`","anchor":"EnvironmentObject-vs-FreemiumKitshared","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Sometimes we were using ","type":"text"},{"code":"FreemiumKit.shared","type":"codeVoice"},{"text":" and sometimes ","type":"text"},{"code":"@EnvironmentObject var freemiumKit: FreemiumKit","type":"codeVoice"},{"text":". They both actually refer to the exact same Singleton instance. So you might ask yourself: ","type":"text"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"When to use which?"}],"type":"strong"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The answer is simple: Whenever you are in a "},{"type":"strong","inlineContent":[{"text":"SwiftUI view","type":"text"}]},{"type":"text","text":" and you want your view to "},{"type":"strong","inlineContent":[{"text":"automatically update","type":"text"}]},{"type":"text","text":" based on the purchase state, you should use "},{"type":"codeVoice","code":"@EnvironmentObject"},{"type":"text","text":". This will ensure that the SwiftUI rendering picks up changes to the purchase state and refreshes your UI accordingly."}]},{"type":"paragraph","inlineContent":[{"text":"Everywhere else, you can use ","type":"text"},{"code":"FreemiumKit.shared","type":"codeVoice"},{"text":". For exmaple in your model layer, your user-intitiated functions, or even in one-off modifiers in your views like in ","type":"text"},{"code":"onAppear","type":"codeVoice"},{"text":".","type":"text"}]},{"text":"SwiftUI Previews","anchor":"SwiftUI-Previews","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"For SwiftUI previews to work where you make use of the built-in views or modifier, add a call to "},{"type":"codeVoice","code":".environmentObject(FreemiumKit.preview)"},{"type":"text","text":" in your preview code like so:"}]},{"type":"codeListing","code":["#Preview {","   YourView()","      .environmentObject(FreemiumKit.preview)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to simulate a specific paid state in your previews, you can call the "},{"type":"codeVoice","code":"withOverridesForDebug(purchasedTier:)"},{"type":"text","text":" function on "},{"type":"codeVoice","code":"FreemiumKit.preview"},{"type":"text","text":" and set your desired tier (set "},{"type":"codeVoice","code":"1"},{"type":"text","text":" for full access). The default "},{"type":"codeVoice","code":"FreemiumKit.preview"},{"type":"text","text":" shows in the “nothing purchased” state, showcasing how things will look from a Free users perspective. For example:"}]},{"type":"codeListing","code":["#Preview(\"Full Access\") {","   YourView()","      .environmentObject(FreemiumKit.preview.withOverridesForDebug(purchasedTier: 1))","}"],"syntax":"swift"},{"text":"Direct Access to StoreKit Transactions","anchor":"Direct-Access-to-StoreKit-Transactions","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"In some advanced use cases, you might want to directly access the transactions reported by ","type":"text"},{"type":"codeVoice","code":"StoreKit"},{"text":" which our SDK is already subscribed to. You can easily get all valid transactions by calling ","type":"text"},{"type":"codeVoice","code":"FreemiumKit.shared.purchasedTransactions"},{"text":" or even subscribe and react to changes in your SwiftUI views:","type":"text"}]},{"type":"codeListing","code":["import FreemiumKit","","struct MyView: View {","   @EnvironmentObject var freemiumKit: FreemiumKit","","   var body: some View {","      MyView()","         .onChange(of: self.freemiumKit.purchasedTransactions) {","            for transaction in self.freemiumKit.purchasedTransactions {","               \/\/ do something with the `StoreKit.Transaction`","            }","         }","   }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If all you need to know is ","type":"text"},{"inlineContent":[{"type":"text","text":"which"}],"type":"emphasis"},{"text":" of your in-app purchases\/subscriptions the user has purchased, there’s a much easier way to get the ID of the product (e.g. ","type":"text"},{"code":"YourApp.Pro.Monthly","type":"codeVoice"},{"text":"):","type":"text"}]},{"type":"codeListing","code":["FreemiumKit.shared.purchasedProductID  \/\/ returns a `String?`"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If all you need is to ","type":"text"},{"inlineContent":[{"text":"get notified","type":"text"}],"type":"strong"},{"text":" when a user just made a purchase (e.g. to report to analytics or show some kind of confetti effect), use the built-in ","type":"text"},{"code":".onPurchaseCompleted","type":"codeVoice"},{"text":" modifier which has the purchased ","type":"text"},{"code":"transaction","type":"codeVoice"},{"text":" available with all the StoreKit details if needed:","type":"text"}]},{"type":"codeListing","code":["import FreemiumKit","","@main","struct MyApp: App {","   var body: some Scene {","      WindowGroup {","         MainView()","            .onPurchaseCompleted { transaction in","               \/\/ show confetti or report transaction details to analytics","            }","            .environmentObject(FreemiumKit.shared)","      }","   }","}"],"syntax":"swift"},{"text":"Contact","anchor":"Contact","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Have questions or need support? Reach out to me at ","type":"text"},{"identifier":"mailto:freemiumkit@fline.dev","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"text":"Legal","anchor":"Legal","type":"heading","level":2},{"type":"small","inlineContent":[{"text":"Cihat Gündüz © 2024. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Privacy: No personal data is tracked on this site.","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/www.fline.dev\/imprint\/"}]}],"kind":"content"}],"sections":[],"abstract":[{"text":"Learn how to set up your app for our paywalls and live push notifications.","type":"text"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/AppReviewChecklist","doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/MigrateFromPaid","doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/FAQs"]}],"sampleCodeDownload":{"action":{"overridingTitle":"Detailed Setup Video (17 min)","type":"reference","identifier":"https:\/\/www.youtube.com\/watch?v=6JxwA3WieHs","isActive":true},"kind":"sampleDownload"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/SetupGuide"},"references":{"doc://FreemiumKit/documentation/Index":{"type":"topic","role":"collection","url":"\/documentation\/index","kind":"article","images":[{"type":"icon","identifier":"FreemiumKit.png"}],"abstract":[{"type":"text","text":"Simple In-App Purchases and Subscriptions for Apple Platforms:"},{"type":"text","text":" "},{"text":"Automation, Paywalls, A\/B Testing, Live Notifications, PPP, and more.","type":"text"}],"title":"FreemiumKit","identifier":"doc:\/\/FreemiumKit\/documentation\/Index"},"https://developer.apple.com/help/app-store-connect/manage-subscriptions/offer-auto-renewable-subscriptions":{"titleInlineContent":[{"text":"official docs","type":"text"}],"type":"link","title":"official docs","url":"https:\/\/developer.apple.com\/help\/app-store-connect\/manage-subscriptions\/offer-auto-renewable-subscriptions","identifier":"https:\/\/developer.apple.com\/help\/app-store-connect\/manage-subscriptions\/offer-auto-renewable-subscriptions"},"mailto:freemiumkit@fline.dev":{"titleInlineContent":[{"text":"freemiumkit@fline.dev","type":"text"}],"type":"link","title":"freemiumkit@fline.dev","url":"mailto:freemiumkit@fline.dev","identifier":"mailto:freemiumkit@fline.dev"},"Setup-PaidStatusView":{"type":"image","alt":null,"variants":[{"url":"\/images\/Setup-PaidStatusView.jpeg","traits":["1x","light"]}],"identifier":"Setup-PaidStatusView"},"https://www.fline.dev/imprint/":{"titleInlineContent":[{"text":"Imprint","type":"text"}],"type":"link","title":"Imprint","url":"https:\/\/www.fline.dev\/imprint\/","identifier":"https:\/\/www.fline.dev\/imprint\/"},"FreemiumKit.png":{"type":"image","alt":null,"variants":[{"url":"\/images\/FreemiumKit.png","traits":["1x","light"]}],"identifier":"FreemiumKit.png"},"doc://FreemiumKit/documentation/FreemiumKit/MigrateFromPaid":{"type":"topic","role":"article","url":"\/documentation\/freemiumkit\/migratefrompaid","kind":"article","images":[{"type":"icon","identifier":"FreemiumKit.png"}],"abstract":[{"text":"Learn how to migrate from a paid-up-front app to the Freemium model using FreemiumKit in 3 simple steps, while preserving access to your app for those who already purchased.","type":"text"}],"title":"Paid to Freemium Migration Guide","identifier":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/MigrateFromPaid"},"PaidViews":{"type":"video","poster":"PaidViews-Poster","alt":null,"variants":[{"url":"\/videos\/PaidViews.mp4","traits":["1x","light"]}],"identifier":"PaidViews"},"https://www.youtube.com/watch?v=6JxwA3WieHs":{"type":"download","checksum":null,"url":"https:\/\/www.youtube.com\/watch?v=6JxwA3WieHs","identifier":"https:\/\/www.youtube.com\/watch?v=6JxwA3WieHs"},"Setup-Choose-Package":{"type":"image","alt":null,"variants":[{"url":"\/images\/Setup-Choose-Package.jpeg","traits":["1x","light"]}],"identifier":"Setup-Choose-Package"},"doc://FreemiumKit/documentation/FreemiumKit/FAQs":{"type":"topic","role":"article","url":"\/documentation\/freemiumkit\/faqs","kind":"article","images":[{"type":"icon","identifier":"FreemiumKit.png"}],"abstract":[{"text":"The most frequently asked questions about FreemiumKit.","type":"text"}],"title":"FAQs","identifier":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/FAQs"},"Setup-Add-Dependency":{"type":"image","alt":null,"variants":[{"url":"\/images\/Setup-Add-Dependency.jpeg","traits":["1x","light"]}],"identifier":"Setup-Add-Dependency"},"PaidViews-Poster":{"type":"image","alt":null,"variants":[{"url":"\/images\/PaidViews-Poster.jpeg","traits":["1x","light"]}],"identifier":"PaidViews-Poster"},"Setup-Add-Package":{"type":"image","alt":null,"variants":[{"url":"\/images\/Setup-Add-Package.jpeg","traits":["1x","light"]}],"identifier":"Setup-Add-Package"},"doc://FreemiumKit/documentation/FreemiumKit/AppReviewChecklist":{"abstract":[{"type":"text","text":"This checklist helps developers using FreemiumKit to navigate Apple’s app review process for apps with in-app purchases (IAPs)."}],"role":"article","images":[{"type":"icon","identifier":"FreemiumKit.png"}],"type":"topic","url":"\/documentation\/freemiumkit\/appreviewchecklist","title":"Checklist to Pass App Review","kind":"article","identifier":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/AppReviewChecklist"}}}