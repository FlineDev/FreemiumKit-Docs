{"sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","overridingTitle":"Detailed Setup Video (17 min)","isActive":true,"identifier":"https:\/\/www.youtube.com\/watch?v=6JxwA3WieHs"}},"hierarchy":{"paths":[["doc:\/\/FreemiumKit\/documentation\/Index"]]},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","abstract":[{"type":"text","text":"Learn how to set up your app for our paywalls and live push notifications."}],"metadata":{"title":"SDK Setup Guide","roleHeading":"FreemiumKit","role":"article","images":[{"identifier":"FreemiumKit.png","type":"icon"}]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Adding-the-SDK","text":"Adding the SDK","level":2},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Open your app project in Xcode."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"In the “File” menu select “Add Package Dependencies…”","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"Setup-Add-Dependency"}]},{"type":"orderedList","start":3,"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Paste this to the top right text field and press “Add Package”:","type":"text"}]},{"type":"codeListing","code":["https:\/\/github.com\/FlineDev\/FreemiumKit.git"],"syntax":null}]}]},{"type":"paragraph","inlineContent":[{"identifier":"Setup-Add-Package","type":"image"}]},{"type":"orderedList","start":4,"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select your app target (if not already selected) and confirm by pressing “Add Package”"}]}]}]},{"type":"paragraph","inlineContent":[{"identifier":"Setup-Choose-Package","type":"image"}]},{"type":"heading","anchor":"Configuring-the-SDK","text":"Configuring the SDK","level":2},{"type":"aside","name":"Tip","style":"tip","content":[{"inlineContent":[{"type":"text","text":"Don’t forget to "},{"code":"import FreemiumKit","type":"codeVoice"},{"type":"text","text":" for any of the below calls to build."}],"type":"paragraph"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"Make sure your app’s Asset Catalog contains the ","type":"text"},{"type":"codeVoice","code":"FreemiumKit"},{"text":" data set from the “Setup” tab of your app in FreemiumKit for Mac. If it doesn’t, drag & drop it from the Setup tab now.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a call to "},{"code":".environmentObject(FreemiumKit.shared)","type":"codeVoice"},{"type":"text","text":" to the root view of every scene in the app entry point. For example:"}]},{"type":"codeListing","syntax":"swift","code":["import FreemiumKit","","@main","struct MyApp: App {","   var body: some Scene {","      WindowGroup {","         MainView()","            .environmentObject(FreemiumKit.shared)","      }","   }","}"]}]}]},{"type":"aside","name":"Tip","style":"tip","content":[{"inlineContent":[{"type":"text","text":"If you want to disable the paywall during DEBUG builds after you’ve made sure that it works as expected, you can call "},{"code":".overrideForDebug","type":"codeVoice"},{"type":"text","text":" on "},{"code":"FreemiumKit.shared","type":"codeVoice"},{"type":"text","text":" within an "},{"code":"#if DEBUG","type":"codeVoice"},{"type":"text","text":" check like this:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["WindowGroup {","   MainView()","      .onAppear {","         #if DEBUG","         FreemiumKit.shared.overrideForDebug(purchasedTier: 1)","         #endif","      }","      .environmentObject(FreemiumKit.shared)","}"]}]},{"type":"heading","anchor":"Understanding-Apples-Tier-System","text":"Understanding Apples Tier System","level":2},{"type":"paragraph","inlineContent":[{"text":"If your goal is to ship your app with any combination of Monthly, Yearly, and Lifetime purchases, you most likely only need one tier: Tier 1. Just pass ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"purchasedTier","type":"codeVoice"},{"text":" parameter everywhere or don’t pass any, ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" is the default value – easy. Continue to the next section.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But if you want to support multiple levels of access to your app, like a combination of Monthly\/Yearly\/Lifetime for the ‘Pro’ level, another combination of Monthly\/Yearly\/Lifetime for the ‘Max’ level, and maybe another combination of Monthly\/Yearly\/Lifetime for the ‘Ultra’ level, that’s when you need to think about which value to pass to the "},{"code":"purchasedTier","type":"codeVoice"},{"type":"text","text":" parameter. Note that "},{"code":"1","type":"codeVoice"},{"type":"text","text":" always refers to the highest level. That’s how Apple has decided their tier system to work. Read their "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/help\/app-store-connect\/manage-subscriptions\/offer-auto-renewable-subscriptions"},{"type":"text","text":" to learn more."}]},{"type":"heading","anchor":"Showing-the-Paywalls","text":"Showing the Paywalls","level":2},{"identifier":"PaidViews","type":"video"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Lock your paid features for users who have not made a purchase yet by using one of the built-in views ","type":"text"},{"type":"codeVoice","code":"PaidFeatureButton"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"PaidFeatureView"},{"text":". This is the recommended way of using the SDK (when applicable) as it handles purchase states automatically for you and saves you a lot of boilerplate code. For example:","type":"text"}]},{"code":["\/\/ opens paywall if user has not purchased, else just like `Button`","PaidFeatureButton(\"Export\", systemImage: \"square.and.arrow.up\") {","   \/\/ your export logic – no check for a paid tier needed, only called if already purchased ","}","","\/\/ exactly the same as above, but gives you full customizability","PaidFeatureView {","   Button(\"Export\", systemImage: \"square.and.arrow.up\") {","      \/\/ your export logic – no check for a paid tier needed, only called if already purchased","   }","} lockedView: {","   Label(\"Export\", systemImage: \"lock\")","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both "},{"type":"codeVoice","code":"PaidFeatureButton"},{"type":"text","text":" and "},{"type":"codeVoice","code":"PaidFeatureView"},{"type":"text","text":" accept an "},{"type":"codeVoice","code":"unlocksAtTier"},{"type":"text","text":" parameter of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" (default: "},{"type":"codeVoice","code":"1"},{"type":"text","text":"), a "},{"type":"codeVoice","code":"showPaywallOnPressIfLocked"},{"type":"text","text":" parameter of type "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" (default: "},{"type":"codeVoice","code":"true"},{"type":"text","text":"), and a "},{"type":"codeVoice","code":"freeIf"},{"type":"text","text":" parameter of type "},{"type":"codeVoice","code":"(() -> Bool)?"},{"type":"text","text":" (default: "},{"type":"codeVoice","code":"nil"},{"type":"text","text":") to conditionally provide free access."}]},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"If you place "},{"type":"codeVoice","code":"PaidFeatureButton"},{"type":"text","text":" or "},{"type":"codeVoice","code":"PaidFeatureView"},{"type":"text","text":" inside a view that self-dismisses itself after any interaction (like in a "},{"type":"codeVoice","code":"Menu"},{"type":"text","text":"), the paywall might not show because SwiftUI deinitializes the view and attached logic before it can be executed. Use the below method in such contexts and place the "},{"type":"codeVoice","code":".paywall"},{"type":"text","text":" modifier at the root of your view to avoid auto-deinit."}],"type":"paragraph"}],"name":"Note"}]},{"content":[{"inlineContent":[{"text":"Alternatively, if you want to control the presentation of the paywall manually, you can add the ","type":"text"},{"code":".paywall(isPresented:)","type":"codeVoice"},{"text":" modifier to your custom views where needed. For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["import FreemiumKit","","struct MyView: View {","   @State var showPaywall: Bool = false","","   var body: some View {","      Button(\"Unlock Pro\") {","         showPaywall = true","      }","      .paywall(isPresented: $showPaywall)","   }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you want to conditionally hide views based on paid state (like hiding the unlock button if a user has already purchased), you can add the "},{"type":"codeVoice","code":"FreemiumKit"},{"type":"text","text":" object as an "},{"type":"codeVoice","code":"@EnvironmentObject"},{"type":"text","text":" and call "},{"type":"codeVoice","code":".purchasedTier"},{"type":"text","text":" or "},{"type":"codeVoice","code":".hasPurchased"},{"type":"text","text":" if you only have one tier like so:"}],"type":"paragraph"},{"syntax":"swift","code":["import FreemiumKit","","struct MyView: View {","   @EnvironmentObject var freemiumKit: FreemiumKit","   @State var showPaywall: Bool = false","","   var body: some View {","      if freemiumKit.purchasedTier == nil {","         Button(\"Unlock Pro\") {","            showPaywall = true","         }","         .paywall(isPresented: $showPaywall)","      }","   }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you want to show the paywall upon appearance of a view if a user has not paid, you should first check that the "},{"code":"purchasesLoaded","type":"codeVoice"},{"type":"text","text":" property of "},{"code":"FreemiumKit","type":"codeVoice"},{"type":"text","text":" is "},{"code":"true","type":"codeVoice"},{"type":"text","text":" – or else paying users might see the paywall, too. Since this is a common use case, our SDK ships with the "},{"code":".onPurchasesLoaded","type":"codeVoice"},{"type":"text","text":" view modifier which is guaranteed to be called exactly once (like "},{"code":".onAppear","type":"codeVoice"},{"type":"text","text":") but only when purchases are loaded:"}],"type":"paragraph"},{"syntax":"swift","code":["import FreemiumKit","","struct MyView: View {","   @State var showPaywall: Bool = false","","   var body: some View {","      VStack {","         \/\/ your view ...","      }","      .paywall(isPresented: $showPaywall)","      .onPurchasesLoaded {","         if !FreemiumKit.shared.hasPurchased {","            showPaywall = true","         }","      }","   }","}"],"type":"codeListing"}]},{"content":[{"inlineContent":[{"text":"There’s also a ","type":"text"},{"code":"PaidStatusView","type":"codeVoice"},{"text":" which you can add to your app’s settings to indicate to users what their current purchase state is. There are two styles:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["PaidStatusView(style: .plain)","PaidStatusView(style: .decorative(icon: .laurel))"],"type":"codeListing"}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"Setup-PaidStatusView"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":".decorative"},{"text":" style has multiple ","type":"text"},{"type":"codeVoice","code":"icon"},{"text":" parameter options and also accepts optional ","type":"text"},{"type":"codeVoice","code":"foregroundColor"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"backgroundColor"},{"text":" parameters if you need to adjust the defaults. Note that the ","type":"text"},{"type":"codeVoice","code":"PaidStatusView"},{"text":" will automatically open a paywall on press if there’s no purchase yet. Else, it’s rendered as just a label without interaction.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you place it inside a "},{"type":"codeVoice","code":"Form"},{"type":"text","text":" with "},{"type":"codeVoice","code":"Sections"},{"type":"text","text":", you might want to set the "},{"type":"codeVoice","code":"listRowBackground"},{"type":"text","text":" for a clean look like this:"}]},{"type":"codeListing","code":["Form {","   Section {","      PaidStatusView(style: .decorative(icon: .laurel))","         .listRowBackground(Color.accentColor)","         .padding(.vertical, -10)","   }","   ","   \/\/ ...","}"],"syntax":"swift"},{"type":"aside","name":"Tip","style":"tip","content":[{"inlineContent":[{"text":"We prepared a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/AppReviewChecklist","type":"reference"},{"text":" you will find useful, especially if this is the first time you’re publishing an app with In-App Purchases.","type":"text"}],"type":"paragraph"}]},{"type":"heading","anchor":"EnvironmentObject-vs-FreemiumKitshared","text":"`@EnvironmentObject` vs `FreemiumKit.shared`","level":2},{"type":"paragraph","inlineContent":[{"text":"Sometimes we were using ","type":"text"},{"code":"FreemiumKit.shared","type":"codeVoice"},{"text":" and sometimes ","type":"text"},{"code":"@EnvironmentObject var freemiumKit: FreemiumKit","type":"codeVoice"},{"text":". They both actually refer to the exact same Singleton instance. So you might ask yourself: ","type":"text"},{"inlineContent":[{"inlineContent":[{"text":"When to use which?","type":"text"}],"type":"strong"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The answer is simple: Whenever you are in a "},{"type":"strong","inlineContent":[{"type":"text","text":"SwiftUI view"}]},{"type":"text","text":" and you want your view to "},{"type":"strong","inlineContent":[{"type":"text","text":"automatically update"}]},{"type":"text","text":" based on the purchase state, you should use "},{"type":"codeVoice","code":"@EnvironmentObject"},{"type":"text","text":". This will ensure that the SwiftUI rendering picks up changes to the purchase state and refreshes your UI accordingly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Everywhere else, you can use "},{"code":"FreemiumKit.shared","type":"codeVoice"},{"type":"text","text":". For example in your model layer, your user-intitiated functions, or even in one-off modifiers in your views like in "},{"code":"onAppear","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Before accessing ","type":"text"},{"type":"codeVoice","code":"FreemiumKit"},{"text":" with either method in an Apple Watch extension, please read ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/FAQ-AppleWatch","type":"reference"},{"text":" first.","type":"text"}]}]},{"type":"heading","anchor":"SwiftUI-Previews","text":"SwiftUI Previews","level":2},{"type":"paragraph","inlineContent":[{"text":"For SwiftUI previews to work where you make use of the built-in views or modifier, add a call to ","type":"text"},{"code":".environmentObject(FreemiumKit.shared)","type":"codeVoice"},{"text":" in your preview code like so:","type":"text"}]},{"type":"codeListing","code":["#Preview {","   YourView()","      .environmentObject(FreemiumKit.shared)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to simulate a specific paid state in your previews, you can call the "},{"type":"codeVoice","code":"withOverridesForDebug(purchasedTier:)"},{"type":"text","text":" function on "},{"type":"codeVoice","code":"FreemiumKit.shared"},{"type":"text","text":" and set your desired tier (set "},{"type":"codeVoice","code":"1"},{"type":"text","text":" for full access). The default "},{"type":"codeVoice","code":"FreemiumKit.shared"},{"type":"text","text":" shows in the “nothing purchased” state, showcasing how things will look from a Free users perspective. For example:"}]},{"type":"codeListing","code":["#Preview(\"Full Access\") {","   YourView()","      .environmentObject(FreemiumKit.shared.withOverridesForDebug(purchasedTier: 1))","}"],"syntax":"swift"},{"type":"aside","name":"Note","style":"note","content":[{"inlineContent":[{"text":"To see your paywall UI in previews, drag & drop your config file in the ‘Setup’ tab to your ","type":"text"},{"code":"Preview Assets.xcassets","type":"codeVoice"},{"text":" folder (in addition to ","type":"text"},{"code":"Assets.xcassets","type":"codeVoice"},{"text":"), but rename this asset from ‘FreemiumKit’ to ‘FreemiumKitPreview’ after the drag to avoid duplicate asset warnings.","type":"text"}],"type":"paragraph"}]},{"type":"heading","anchor":"Direct-Access-to-StoreKit-Transactions","text":"Direct Access to StoreKit Transactions","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"In some advanced use cases, you might want to directly access the transactions reported by "},{"code":"StoreKit","type":"codeVoice"},{"type":"text","text":" which our SDK is already subscribed to. You can easily get all valid transactions by calling "},{"code":"FreemiumKit.shared.purchasedTransactions","type":"codeVoice"},{"type":"text","text":" or even subscribe and react to changes in your SwiftUI views:"}]},{"type":"codeListing","code":["import FreemiumKit","","struct MyView: View {","   @EnvironmentObject var freemiumKit: FreemiumKit","","   var body: some View {","      MyView()","         .onChange(of: self.freemiumKit.purchasedTransactions) {","            for transaction in self.freemiumKit.purchasedTransactions {","               \/\/ do something with the `StoreKit.Transaction`","            }","         }","   }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If all you need to know is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"which"}]},{"type":"text","text":" of your in-app purchases\/subscriptions the user has purchased, there’s a much easier way to get the ID of the product (e.g. "},{"type":"codeVoice","code":"YourApp.Pro.Monthly"},{"type":"text","text":"):"}]},{"type":"codeListing","code":["FreemiumKit.shared.purchasedProductID  \/\/ returns a `String?`"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If all you need is to ","type":"text"},{"inlineContent":[{"text":"get notified","type":"text"}],"type":"strong"},{"text":" when a user just made a purchase (e.g. to report to analytics or show some kind of confetti effect), use the built-in ","type":"text"},{"code":".onPurchaseCompleted","type":"codeVoice"},{"text":" modifier which has the purchased ","type":"text"},{"code":"transaction","type":"codeVoice"},{"text":" available with all the StoreKit details if needed:","type":"text"}]},{"type":"codeListing","code":["import FreemiumKit","","@main","struct MyApp: App {","   var body: some Scene {","      WindowGroup {","         MainView()","            .onPurchaseCompleted { transaction in","               \/\/ show confetti or report transaction details to analytics","            }","            .environmentObject(FreemiumKit.shared)","      }","   }","}"],"syntax":"swift"},{"type":"heading","anchor":"Dynamically-Showing-Product-Tiers","text":"Dynamically Showing Product Tiers","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can customize which product tiers are shown in the paywall using the "},{"type":"codeVoice","code":"showTierInPaywall"},{"type":"text","text":" closure. This is particularly useful when you have multiple product tiers and want to conditionally display or hide certain tiers based on dynamic logic, such as a user’s app usage or behavior."}]},{"type":"paragraph","inlineContent":[{"text":"To configure this behavior, simply assign a closure to ","type":"text"},{"code":"FreemiumKit.shared.showTierInPaywall","type":"codeVoice"},{"text":". The closure takes the tier number as an input and needs to return ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" if the tier should be displayed or ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" if it should be hidden. Here’s an example of how to hide a specific tier, call this right on app start:","type":"text"}]},{"type":"codeListing","code":["FreemiumKit.shared.showTierInPaywall = { tier in","   return tier != 3  \/\/ hide tier 3, but show all others","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This allows you to tailor the product options presented to your users, improving their experience based on their specific circumstances.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/freemiumkit.app","type":"reference","isActive":true}]},{"type":"heading","anchor":"Contact","text":"Contact","level":2},{"type":"paragraph","inlineContent":[{"text":"Have questions or need support? Reach out to me at ","type":"text"},{"identifier":"mailto:freemiumkit@fline.dev","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"heading","anchor":"Legal","text":"Legal","level":2},{"type":"small","inlineContent":[{"type":"text","text":"Cihat Gündüz © 2024. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Privacy: No personal data is tracked on this site."},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/www.fline.dev\/imprint\/","isActive":true}]}]}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/AppReviewChecklist","doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/MigrateFromPaid","doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/FAQs"]}],"identifier":{"url":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/SetupGuide","interfaceLanguage":"swift"},"references":{"FreemiumKit.png":{"alt":null,"identifier":"FreemiumKit.png","type":"image","variants":[{"url":"\/images\/FreemiumKit.png","traits":["1x","light"]}]},"PaidViews-Poster":{"alt":null,"identifier":"PaidViews-Poster","type":"image","variants":[{"url":"\/images\/PaidViews-Poster.jpeg","traits":["1x","light"]}]},"mailto:freemiumkit@fline.dev":{"identifier":"mailto:freemiumkit@fline.dev","type":"link","url":"mailto:freemiumkit@fline.dev","titleInlineContent":[{"text":"freemiumkit@fline.dev","type":"text"}],"title":"freemiumkit@fline.dev"},"https://developer.apple.com/help/app-store-connect/manage-subscriptions/offer-auto-renewable-subscriptions":{"identifier":"https:\/\/developer.apple.com\/help\/app-store-connect\/manage-subscriptions\/offer-auto-renewable-subscriptions","type":"link","url":"https:\/\/developer.apple.com\/help\/app-store-connect\/manage-subscriptions\/offer-auto-renewable-subscriptions","titleInlineContent":[{"text":"official docs","type":"text"}],"title":"official docs"},"doc://FreemiumKit/documentation/FreemiumKit/AppReviewChecklist":{"abstract":[{"text":"This checklist helps developers using FreemiumKit to navigate Apple’s app review process for apps with in-app purchases (IAPs).","type":"text"}],"url":"\/documentation\/freemiumkit\/appreviewchecklist","role":"article","images":[{"type":"icon","identifier":"FreemiumKit.png"}],"type":"topic","identifier":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/AppReviewChecklist","kind":"article","title":"Checklist to Pass App Review"},"https://www.fline.dev/imprint/":{"identifier":"https:\/\/www.fline.dev\/imprint\/","type":"link","url":"https:\/\/www.fline.dev\/imprint\/","titleInlineContent":[{"text":"Imprint","type":"text"}],"title":"Imprint"},"Setup-PaidStatusView":{"alt":null,"identifier":"Setup-PaidStatusView","type":"image","variants":[{"url":"\/images\/Setup-PaidStatusView.jpeg","traits":["1x","light"]}]},"doc://FreemiumKit/documentation/Index":{"abstract":[{"text":"Simple In-App Purchases and Subscriptions for Apple Platforms:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Automation, Paywalls, A\/B Testing, Live Notifications, PPP, and more."}],"type":"topic","kind":"article","images":[{"identifier":"FreemiumKit.png","type":"icon"}],"identifier":"doc:\/\/FreemiumKit\/documentation\/Index","url":"\/documentation\/index","role":"collection","title":"FreemiumKit"},"doc://FreemiumKit/documentation/FreemiumKit/MigrateFromPaid":{"url":"\/documentation\/freemiumkit\/migratefrompaid","kind":"article","images":[{"type":"icon","identifier":"FreemiumKit.png"}],"type":"topic","identifier":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/MigrateFromPaid","abstract":[{"type":"text","text":"Learn how to migrate from a paid-up-front app to the Freemium model using FreemiumKit in 3 simple steps, while preserving access to your app for those who already purchased."}],"role":"article","title":"Paid to Freemium Migration Guide"},"https://freemiumkit.app":{"identifier":"https:\/\/freemiumkit.app","type":"link","url":"https:\/\/freemiumkit.app","titleInlineContent":[{"text":"🏠 Back to Home","type":"text"}],"title":"🏠 Back to Home"},"PaidViews":{"alt":null,"identifier":"PaidViews","type":"video","poster":"PaidViews-Poster","variants":[{"url":"\/videos\/PaidViews.mp4","traits":["1x","light"]}]},"Setup-Add-Package":{"alt":null,"identifier":"Setup-Add-Package","type":"image","variants":[{"url":"\/images\/Setup-Add-Package.jpeg","traits":["1x","light"]}]},"doc://FreemiumKit/documentation/FreemiumKit/FAQs":{"abstract":[{"text":"The most frequently asked questions about FreemiumKit.","type":"text"}],"type":"topic","kind":"article","images":[{"identifier":"FreemiumKit.png","type":"icon"}],"identifier":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/FAQs","url":"\/documentation\/freemiumkit\/faqs","role":"article","title":"FAQs"},"Setup-Add-Dependency":{"alt":null,"identifier":"Setup-Add-Dependency","type":"image","variants":[{"url":"\/images\/Setup-Add-Dependency.jpeg","traits":["1x","light"]}]},"Setup-Choose-Package":{"alt":null,"identifier":"Setup-Choose-Package","type":"image","variants":[{"url":"\/images\/Setup-Choose-Package.jpeg","traits":["1x","light"]}]},"https://www.youtube.com/watch?v=6JxwA3WieHs":{"identifier":"https:\/\/www.youtube.com\/watch?v=6JxwA3WieHs","type":"download","url":"https:\/\/www.youtube.com\/watch?v=6JxwA3WieHs","checksum":null},"doc://FreemiumKit/documentation/FreemiumKit/FAQ-AppleWatch":{"abstract":[{"text":"Yes, Apple Watch is supported in FreemiumKit with a small extra setup step. Learn more about what that step is and what limitations there are.","type":"text"}],"type":"topic","kind":"article","identifier":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/FAQ-AppleWatch","url":"\/documentation\/freemiumkit\/faq-applewatch","role":"sampleCode","title":"Is Apple Watch Supported as a Platform in FreemiumKit?"}}}