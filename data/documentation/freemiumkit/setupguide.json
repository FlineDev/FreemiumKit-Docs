{"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Adding-the-SDK","text":"Adding the SDK"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Open your app project in Xcode.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"In the “File” menu select “Add Package Dependencies…”"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"image","identifier":"Setup-Add-Dependency"}],"type":"paragraph"},{"type":"orderedList","start":3,"items":[{"content":[{"inlineContent":[{"type":"text","text":"Paste this to the top right text field and press “Add Package”:"}],"type":"paragraph"},{"code":["https:\/\/github.com\/FlineDev\/FreemiumKit.git"],"type":"codeListing","syntax":null}]}]},{"inlineContent":[{"type":"image","identifier":"Setup-Add-Package"}],"type":"paragraph"},{"type":"orderedList","start":4,"items":[{"content":[{"inlineContent":[{"text":"Select your app target (if not already selected) and confirm by pressing “Add Package”","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"identifier":"Setup-Choose-Package","type":"image"}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"Configuring-the-SDK","text":"Configuring the SDK"},{"name":"Tip","style":"tip","type":"aside","content":[{"inlineContent":[{"text":"Don’t forget to ","type":"text"},{"code":"import FreemiumKit","type":"codeVoice"},{"text":" for any of the below calls to build.","type":"text"}],"type":"paragraph"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Make sure your app’s Asset Catalog contains the ","type":"text"},{"type":"codeVoice","code":"FreemiumKit"},{"text":" data set from the “Setup” tab of your app in FreemiumKit for Mac. If it doesn’t, drag & drop it from the Setup tab now.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Add a call to ","type":"text"},{"code":".environmentObject(FreemiumKit.shared)","type":"codeVoice"},{"type":"text","text":" to the root view of every scene in the app entry point. For example:"}],"type":"paragraph"},{"type":"codeListing","code":["import FreemiumKit","","@main","struct MyApp: App {","   var body: some Scene {","      WindowGroup {","         MainView()","            .environmentObject(FreemiumKit.shared)","      }","   }","}"],"syntax":"swift"}]}]},{"name":"Tip","style":"tip","type":"aside","content":[{"inlineContent":[{"type":"text","text":"If you want to disable the paywall during DEBUG builds after you’ve made sure that it works as expected, you can call "},{"code":".overrideForDebug","type":"codeVoice"},{"type":"text","text":" on "},{"code":"FreemiumKit.shared","type":"codeVoice"},{"type":"text","text":" within an "},{"code":"#if DEBUG","type":"codeVoice"},{"type":"text","text":" check like this:"}],"type":"paragraph"},{"syntax":"swift","code":["WindowGroup {","   MainView()","      .onAppear {","         #if DEBUG","         FreemiumKit.shared.overrideForDebug(purchasedTier: 1)","         #endif","      }","      .environmentObject(FreemiumKit.shared)","}"],"type":"codeListing"}]},{"type":"heading","level":2,"anchor":"Understanding-Apples-Tier-System","text":"Understanding Apples Tier System"},{"inlineContent":[{"type":"text","text":"If your goal is to ship your app with any combination of Monthly, Yearly, and Lifetime purchases, you most likely only need one tier: Tier 1. Just pass "},{"type":"codeVoice","code":"1"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"purchasedTier"},{"type":"text","text":" parameter everywhere – easy. Continue to the next section."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"But if you want to support multiple levels of access to your app, like a combination of Monthly\/Yearly\/Lifetime for the ‘Pro’ level, another combination of Monthly\/Yearly\/Lifetime for the ‘Max’ level, and maybe another combination of Monthly\/Yearly\/Lifetime for the ‘Ultra’ level, that’s when you need to think about which value to pass to the "},{"type":"codeVoice","code":"purchasedTier"},{"type":"text","text":" parameter. Note that "},{"type":"codeVoice","code":"1"},{"type":"text","text":" always refers to the highest level. That’s how Apple has decided their tier system to work. Read their "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/help\/app-store-connect\/manage-subscriptions\/offer-auto-renewable-subscriptions"},{"type":"text","text":" to learn more."}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"Showing-the-Paywalls","text":"Showing the Paywalls"},{"type":"video","identifier":"PaidViews"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lock your paid features for users who have not made a purchase yet by using one of the built-in views "},{"code":"PaidFeatureButton","type":"codeVoice"},{"type":"text","text":" or "},{"code":"PaidFeatureView","type":"codeVoice"},{"type":"text","text":". This is the recommended way of using the SDK (when applicable) as it handles purchase states automatically for you and saves you a lot of boilerplate code. For example:"}]},{"code":["\/\/ opens paywall if user has not purchased, else just like `Button`","PaidFeatureButton(\"Export\", systemImage: \"square.and.arrow.up\") {","   \/\/ your export logic – no check for a paid tier needed, only called if already purchased ","}","","\/\/ exactly the same as above, but gives you full customizability","PaidFeatureView {","   Button(\"Export\", systemImage: \"square.and.arrow.up\") {","      \/\/ your export logic – no check for a paid tier needed, only called if already purchased","   }","} lockedView: {","   Label(\"Export\", systemImage: \"lock\")","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both "},{"type":"codeVoice","code":"PaidFeatureButton"},{"type":"text","text":" and "},{"type":"codeVoice","code":"PaidFeatureView"},{"type":"text","text":" accept an "},{"type":"codeVoice","code":"unlocksAtTier"},{"type":"text","text":" parameter of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" (default: "},{"type":"codeVoice","code":"1"},{"type":"text","text":") and a "},{"type":"codeVoice","code":"showPaywallOnPressIfLocked"},{"type":"text","text":" parameter of type "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" (default: "},{"type":"codeVoice","code":"true"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"text":"If you don’t pass any of those parameters, the default behavior unlocks the feature only if tier 1 is purchased and shows a paywall on press if tier 1 is not yet purchased. If ","type":"text"},{"type":"codeVoice","code":"showPaywallOnPressIfLocked"},{"text":" is set to ","type":"text"},{"type":"codeVoice","code":"false"},{"text":", the locked view will not have any automatic interaction, just rendering locked view state as-is without any added behavior.","type":"text"}]},{"type":"aside","name":"Note","content":[{"inlineContent":[{"text":"If you place ","type":"text"},{"code":"PaidFeatureButton","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"PaidFeatureView"},{"text":" inside a view that self-dismisses itself after any interaction (like in a ","type":"text"},{"type":"codeVoice","code":"Menu"},{"text":"), the paywall might not show because SwiftUI deinitializes the view and attached logic before it can be executed. Use the below method in such contexts and place the ","type":"text"},{"type":"codeVoice","code":".paywall"},{"text":" modifier at the root of your view to avoid auto-deinit.","type":"text"}],"type":"paragraph"}],"style":"note"}]},{"content":[{"inlineContent":[{"text":"Alternatively, if you want to control the presentation of the paywall manually, you can add the ","type":"text"},{"code":".paywall(isPresented:)","type":"codeVoice"},{"text":" modifier to your custom views where needed. For example:","type":"text"}],"type":"paragraph"},{"code":["import FreemiumKit","","struct MyView: View {","   @State var showPaywall: Bool = false","","   var body: some View {","      Button(\"Unlock Pro\") {","         showPaywall = true","      }","      .paywall(isPresented: $showPaywall)","   }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"If you want to conditionally hide views based on paid state (like hiding the unlock button if a user has already purchased), you can add the ","type":"text"},{"code":"FreemiumKit","type":"codeVoice"},{"text":" object as an ","type":"text"},{"code":"@EnvironmentObject","type":"codeVoice"},{"text":" and call ","type":"text"},{"code":".purchasedTier","type":"codeVoice"},{"text":" or ","type":"text"},{"code":".hasPurchased","type":"codeVoice"},{"text":" if you only have one tier like so:","type":"text"}],"type":"paragraph"},{"code":["import FreemiumKit","","struct MyView: View {","   @EnvironmentObject var freemiumKit: FreemiumKit","   @State var showPaywall: Bool = false","","   var body: some View {","      if freemiumKit.purchasedTier == nil {","         Button(\"Unlock Pro\") {","            showPaywall = true","         }","         .paywall(isPresented: $showPaywall)","      }","   }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you want to show the paywall upon appearance of a view if a user has not paid, you should first check that the "},{"type":"codeVoice","code":"purchasesLoaded"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"FreemiumKit"},{"type":"text","text":" is "},{"type":"codeVoice","code":"true"},{"type":"text","text":" – or else paying users might see the paywall, too. Since this is a common use case, our SDK ships with the "},{"type":"codeVoice","code":".onPurchasesLoaded"},{"type":"text","text":" view modifier which is guaranteed to be called exactly once (like "},{"type":"codeVoice","code":".onAppear"},{"type":"text","text":") but only when purchases are loaded:"}],"type":"paragraph"},{"code":["import FreemiumKit","","struct MyView: View {","   @State var showPaywall: Bool = false","","   var body: some View {","      VStack {","         \/\/ your view ...","      }","      .paywall(isPresented: $showPaywall)","      .onPurchasesLoaded {","         if !FreemiumKit.shared.hasPurchased {","            showPaywall = true","         }","      }","   }","}"],"type":"codeListing","syntax":"swift"}]},{"content":[{"inlineContent":[{"type":"text","text":"There’s also a "},{"type":"codeVoice","code":"PaidStatusView"},{"type":"text","text":" which you can add to your app’s settings to indicate to users what their current purchase state is. There are two styles:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["PaidStatusView(style: .plain)","PaidStatusView(style: .decorative(icon: .laurel))"]}]}]},{"inlineContent":[{"identifier":"Setup-PaidStatusView","type":"image"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":".decorative"},{"type":"text","text":" style has multiple "},{"type":"codeVoice","code":"icon"},{"type":"text","text":" parameter options and also accepts optional "},{"type":"codeVoice","code":"foregroundColor"},{"type":"text","text":" and "},{"type":"codeVoice","code":"backgroundColor"},{"type":"text","text":" parameters if you need to adjust the defaults. Note that the "},{"type":"codeVoice","code":"PaidStatusView"},{"type":"text","text":" will automatically open a paywall on press if there’s no purchase yet. Else, it’s rendered as just a label without interaction."}],"type":"paragraph"},{"inlineContent":[{"text":"If you place it inside a ","type":"text"},{"code":"Form","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"Sections","type":"codeVoice"},{"text":", you might want to set the ","type":"text"},{"code":"listRowBackground","type":"codeVoice"},{"text":" for a clean look like this:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Form {","   Section {","      PaidStatusView(style: .decorative(icon: .laurel))","         .listRowBackground(Color.accentColor)","   }","   ","   \/\/ ...","}"]},{"type":"heading","level":2,"anchor":"EnvironmentObject-vs-FreemiumKitshared","text":"`@EnvironmentObject` vs `FreemiumKit.shared`"},{"inlineContent":[{"text":"Sometimes we were using ","type":"text"},{"code":"FreemiumKit.shared","type":"codeVoice"},{"text":" and sometimes ","type":"text"},{"code":"@EnvironmentObject var freemiumKit: FreemiumKit","type":"codeVoice"},{"text":". They both actually refer to the exact same Singleton instance. So you might ask yourself: ","type":"text"},{"inlineContent":[{"inlineContent":[{"text":"When to use which?","type":"text"}],"type":"strong"}],"type":"emphasis"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The answer is simple: Whenever you are in a "},{"type":"strong","inlineContent":[{"type":"text","text":"SwiftUI view"}]},{"type":"text","text":" and you want your view to "},{"type":"strong","inlineContent":[{"type":"text","text":"automatically update"}]},{"type":"text","text":" based on the purchase state, you should use "},{"code":"@EnvironmentObject","type":"codeVoice"},{"type":"text","text":". This will ensure that the SwiftUI rendering picks up changes to the purchase state and refreshes your UI accordingly."}],"type":"paragraph"},{"inlineContent":[{"text":"Everywhere else, you can use ","type":"text"},{"code":"FreemiumKit.shared","type":"codeVoice"},{"text":". For exmaple in your model layer, your user-intitiated functions, or even in one-off modifiers in your views like in ","type":"text"},{"code":"onAppear","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"SwiftUI-Previews","text":"SwiftUI Previews"},{"inlineContent":[{"text":"For SwiftUI previews to work where you make use of the built-in views or modifier, add a call to ","type":"text"},{"type":"codeVoice","code":".environmentObject(FreemiumKit.preview)"},{"text":" in your preview code like so:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["#Preview {","   YourView()","      .environmentObject(FreemiumKit.preview)","}"]},{"inlineContent":[{"text":"If you want to simulate a specific paid state in your previews, you can call the ","type":"text"},{"type":"codeVoice","code":"withOverridesForDebug(purchasedTier:)"},{"text":" function on ","type":"text"},{"type":"codeVoice","code":"FreemiumKit.preview"},{"text":" and set your desired tier (set ","type":"text"},{"type":"codeVoice","code":"1"},{"text":" for full access). The default ","type":"text"},{"type":"codeVoice","code":"FreemiumKit.preview"},{"text":" shows in the “nothing purchased” state, showcasing how things will look from a Free users perspective. For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["#Preview(\"Full Access\") {","   YourView()","      .environmentObject(FreemiumKit.preview.withOverridesForDebug(purchasedTier: 1))","}"]},{"type":"heading","level":2,"anchor":"Direct-Access-to-StoreKit-Transactions","text":"Direct Access to StoreKit Transactions"},{"inlineContent":[{"text":"In some advanced use cases, you might want to directly access the transactions reported by ","type":"text"},{"code":"StoreKit","type":"codeVoice"},{"text":" which our SDK is already subscribed to. You can easily get all valid transactions by calling ","type":"text"},{"code":"FreemiumKit.shared.purchasedTransactions","type":"codeVoice"},{"text":" or even subscribe and react to changes in your SwiftUI views:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import FreemiumKit","","struct MyView: View {","   @EnvironmentObject var freemiumKit: FreemiumKit","","   var body: some View {","      MyView()","         .onChange(of: self.freemiumKit.purchasedTransactions) {","            for transaction in self.freemiumKit.purchasedTransactions {","               \/\/ do something with the `StoreKit.Transaction`","            }","         }","   }","}"]},{"inlineContent":[{"type":"text","text":"If all you need to know is "},{"type":"emphasis","inlineContent":[{"text":"which","type":"text"}]},{"type":"text","text":" of your in-app purchases\/subscriptions the user has purchased, there’s a much easier way to get the ID of the product (e.g. "},{"code":"YourApp.Pro.Monthly","type":"codeVoice"},{"type":"text","text":"):"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["FreemiumKit.shared.purchasedProductID  \/\/ returns a `String?`"]},{"inlineContent":[{"type":"text","text":"If all you need is to "},{"type":"strong","inlineContent":[{"type":"text","text":"get notified"}]},{"type":"text","text":" when a user just made a purchase (e.g. to report to analytics or show some kind of confetti effect), use the built-in "},{"code":".onPurchaseCompleted","type":"codeVoice"},{"type":"text","text":" modifier which has the purchased "},{"code":"transaction","type":"codeVoice"},{"type":"text","text":" available with all the StoreKit details if needed:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import FreemiumKit","","@main","struct MyApp: App {","   var body: some Scene {","      WindowGroup {","         MainView()","            .onPurchaseCompleted { transaction in","               \/\/ show confetti or report transaction details to analytics","            }","            .environmentObject(FreemiumKit.shared)","      }","   }","}"]},{"inlineContent":[{"identifier":"https:\/\/freemiumkit.app","type":"reference","isActive":true}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"Contact","text":"Contact"},{"inlineContent":[{"text":"Have questions or need support? Reach out to me at ","type":"text"},{"type":"reference","isActive":true,"identifier":"mailto:freemiumkit@fline.dev"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"Legal","text":"Legal"},{"inlineContent":[{"text":"Cihat Gündüz © 2024. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Privacy: No personal data is tracked on this site.","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/www.fline.dev\/imprint\/"}],"type":"small"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/SetupGuide"},"hierarchy":{"paths":[["doc:\/\/FreemiumKit\/documentation\/Index"]]},"abstract":[{"text":"Learn how to set up your app for our paywalls and live push notifications.","type":"text"}],"sections":[],"metadata":{"images":[{"identifier":"FreemiumKit.png","type":"icon"}],"title":"SDK Setup Guide","role":"article","roleHeading":"FreemiumKit"},"kind":"article","sampleCodeDownload":{"kind":"sampleDownload","action":{"isActive":true,"type":"reference","overridingTitle":"Detailed Setup Video (17 min)","identifier":"https:\/\/www.youtube.com\/watch?v=6JxwA3WieHs"}},"seeAlsoSections":[{"identifiers":["doc:\/\/FreemiumKit\/documentation\/Index","doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/AppReviewChecklist","doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/MigrateFromPaid","doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/FAQs"],"generated":true}],"references":{"doc://FreemiumKit/documentation/Index":{"title":"FreemiumKit","images":[{"identifier":"FreemiumKit.png","type":"icon"}],"identifier":"doc:\/\/FreemiumKit\/documentation\/Index","type":"topic","abstract":[{"text":"Simple In-App Purchases and Subscriptions for Apple Platforms:","type":"text"},{"text":" ","type":"text"},{"text":"Automation, Paywalls, A\/B Testing, Live Notifications, PPP, and more.","type":"text"}],"url":"\/documentation\/index","role":"collection","kind":"article"},"PaidViews":{"identifier":"PaidViews","type":"video","poster":"PaidViews-Poster","alt":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/PaidViews.mp4"}]},"Setup-Add-Dependency":{"identifier":"Setup-Add-Dependency","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/Setup-Add-Dependency.jpeg"}]},"Setup-Choose-Package":{"identifier":"Setup-Choose-Package","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/Setup-Choose-Package.jpeg"}]},"doc://FreemiumKit/documentation/FreemiumKit/AppReviewChecklist":{"title":"Checklist to Pass App Review","images":[{"identifier":"FreemiumKit.png","type":"icon"}],"identifier":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/AppReviewChecklist","type":"topic","abstract":[{"type":"text","text":"This checklist helps developers using FreemiumKit to navigate Apple’s app review process for apps with in-app purchases (IAPs)."}],"url":"\/documentation\/freemiumkit\/appreviewchecklist","role":"article","kind":"article"},"doc://FreemiumKit/documentation/FreemiumKit/FAQs":{"title":"FAQs","images":[{"identifier":"FreemiumKit.png","type":"icon"}],"identifier":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/FAQs","type":"topic","abstract":[{"type":"text","text":"The most frequently asked questions about FreemiumKit."}],"url":"\/documentation\/freemiumkit\/faqs","role":"article","kind":"article"},"doc://FreemiumKit/documentation/FreemiumKit/MigrateFromPaid":{"title":"Paid to Freemium Migration Guide","images":[{"identifier":"FreemiumKit.png","type":"icon"}],"identifier":"doc:\/\/FreemiumKit\/documentation\/FreemiumKit\/MigrateFromPaid","type":"topic","abstract":[{"type":"text","text":"Learn how to migrate from a paid-up-front app to the Freemium model using FreemiumKit in 3 simple steps, while preserving access to your app for those who already purchased."}],"url":"\/documentation\/freemiumkit\/migratefrompaid","role":"article","kind":"article"},"https://freemiumkit.app":{"title":"🏠 Back to Home","identifier":"https:\/\/freemiumkit.app","type":"link","titleInlineContent":[{"type":"text","text":"🏠 Back to Home"}],"url":"https:\/\/freemiumkit.app"},"https://developer.apple.com/help/app-store-connect/manage-subscriptions/offer-auto-renewable-subscriptions":{"title":"official docs","identifier":"https:\/\/developer.apple.com\/help\/app-store-connect\/manage-subscriptions\/offer-auto-renewable-subscriptions","type":"link","titleInlineContent":[{"type":"text","text":"official docs"}],"url":"https:\/\/developer.apple.com\/help\/app-store-connect\/manage-subscriptions\/offer-auto-renewable-subscriptions"},"FreemiumKit.png":{"identifier":"FreemiumKit.png","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/FreemiumKit.png"}]},"Setup-PaidStatusView":{"identifier":"Setup-PaidStatusView","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/Setup-PaidStatusView.jpeg"}]},"https://www.fline.dev/imprint/":{"title":"Imprint","identifier":"https:\/\/www.fline.dev\/imprint\/","type":"link","titleInlineContent":[{"type":"text","text":"Imprint"}],"url":"https:\/\/www.fline.dev\/imprint\/"},"https://www.youtube.com/watch?v=6JxwA3WieHs":{"identifier":"https:\/\/www.youtube.com\/watch?v=6JxwA3WieHs","type":"download","url":"https:\/\/www.youtube.com\/watch?v=6JxwA3WieHs","checksum":null},"PaidViews-Poster":{"identifier":"PaidViews-Poster","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/PaidViews-Poster.jpeg"}]},"mailto:freemiumkit@fline.dev":{"title":"freemiumkit@fline.dev","identifier":"mailto:freemiumkit@fline.dev","type":"link","titleInlineContent":[{"type":"text","text":"freemiumkit@fline.dev"}],"url":"mailto:freemiumkit@fline.dev"},"Setup-Add-Package":{"identifier":"Setup-Add-Package","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/Setup-Add-Package.jpeg"}]}}}